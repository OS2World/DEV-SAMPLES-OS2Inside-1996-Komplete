/*******************************************************************************
* FILE NAME: Blckbard.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     Blackboard                                                               *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _ICANVAS_
#include <icanvas.hpp>
#endif

#ifndef _ICOLOR_
#include <icolor.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _IRECT_
#include <irect.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IGROUPBX_
#include <igroupbx.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _BLACKBOARD_
#include "Blckbard.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for BlackboardConn0
//*****************************************************************************
class BlackboardConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~BlackboardConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ExitButton(buttonClickEvent) to BlackBoardFrame(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //BlackboardConn0


//*****************************************************************************
// Class definition for BlackboardConn3
//*****************************************************************************
class BlackboardConn3 : public IObserver, public IStandardNotifier {
public:
   virtual  ~BlackboardConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ClearButton(buttonClickEvent) to CompanyBoard(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;


};   //BlackboardConn3


//*****************************************************************************
// Class definition for BlackboardConn4
//*****************************************************************************
class BlackboardConn4 : public IObserver, public IStandardNotifier {
public:
   virtual  ~BlackboardConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : ClearButton(buttonClickEvent) to NameBoard(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;


};   //BlackboardConn4


//*****************************************************************************
// Class definition for BlackboardConn5
//*****************************************************************************
class BlackboardConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~BlackboardConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   BlackboardConn5 & setText(IEntryField * aSelf) {iText = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : WriteBoard(buttonClickEvent) to NameBoard(text))");
         try {target->setText(iText->text());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;
   IEntryField * iText;


};   //BlackboardConn5


//*****************************************************************************
// Class definition for BlackboardConn7
//*****************************************************************************
class BlackboardConn7 : public IObserver, public IStandardNotifier {
public:
   virtual  ~BlackboardConn7(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   BlackboardConn7 & setText(IEntryField * aSelf) {iText = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : WriteBoard(buttonClickEvent) to CompanyBoard(text))");
         try {target->setText(iText->text());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;
   IEntryField * iText;


};   //BlackboardConn7


//*****************************************************************************
// Class definition for BlackboardConn17
//*****************************************************************************
class BlackboardConn17 : public IObserver, public IStandardNotifier {
public:
   virtual  ~BlackboardConn17(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::visibleId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : BlackBoardFrame(visible) to NameEntry(setFocus))");
         try {target->setFocus();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IEntryField * target;


};   //BlackboardConn17


#pragma export (Blackboard::readyId)
const INotificationId Blackboard::readyId = "Blackboard::readyId";

#pragma export (Blackboard::partWindowId)
unsigned long Blackboard::partWindowId = 0;

//------------------------------------------------------------------------------
// Blackboard :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (Blackboard::defaultFramingSpec())
const IRectangle Blackboard::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 12 - 432),ISize(320, 432)));
}


//------------------------------------------------------------------------------
// Blackboard :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (Blackboard::defaultTitle())
IString Blackboard::defaultTitle()
{
   return("My  Blackboard");
}


//------------------------------------------------------------------------------
// Blackboard :: Blackboard
//------------------------------------------------------------------------------
#pragma export (Blackboard::Blackboard(unsigned long, IWindow *, IWindow *, const IRectangle &, const IFrameWindow::Style &, const char *))
Blackboard::Blackboard(
      unsigned long id, 
      IWindow * parent, 
      IWindow * owner, 
      const IRectangle & rect, 
      const IFrameWindow::Style & style, 
      const char * title)
   : IFrameWindow((partWindowId) ? partWindowId : id, parent, owner, rect, style, title)
{
   partWindowId = (partWindowId) ? partWindowId : id;
   iCanvas = new ICanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iWriteBoard = new IPushButton(
      partWindowId+WNDOFFSET_Blackboard_WriteBoard, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(10,15),ISize(80, 30)), 
      IPushButton::defaultStyle() | IPushButton::defaultButton);
   iClearButton = new IPushButton(
      partWindowId+WNDOFFSET_Blackboard_ClearButton, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(115,15),ISize(80, 30)));
   iExitButton = new IPushButton(
      partWindowId+WNDOFFSET_Blackboard_ExitButton, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(222,15),ISize(80, 30)));
   iOutputGroup = new IGroupBox(
      partWindowId+WNDOFFSET_Blackboard_OutputGroup, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(14,240),ISize(282, 137)));
   iInputGroup = new IGroupBox(
      partWindowId+WNDOFFSET_Blackboard_InputGroup, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(14,84),ISize(282, 138)));
   iNameTxt = new IStaticText(
      partWindowId+WNDOFFSET_Blackboard_NameTxt, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(29,183),ISize(256, 21)));
   iCompanyTxt = new IStaticText(
      partWindowId+WNDOFFSET_Blackboard_CompanyTxt, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(29,130),ISize(256, 21)));
   iNameTxt1 = new IStaticText(
      partWindowId+WNDOFFSET_Blackboard_NameTxt1, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(29,336),ISize(256, 21)));
   iCompanyTxt3 = new IStaticText(
      partWindowId+WNDOFFSET_Blackboard_CompanyTxt3, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(29,283),ISize(256, 21)));
   iCompanyEntry = new IEntryField(
      partWindowId+WNDOFFSET_Blackboard_CompanyEntry, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(29,101),ISize(256, 21)), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iNameEntry = new IEntryField(
      partWindowId+WNDOFFSET_Blackboard_NameEntry, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(29,160),ISize(256, 21)), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iCompanyBoard = new IEntryField(
      partWindowId+WNDOFFSET_Blackboard_CompanyBoard, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(29,255),ISize(256, 21)), 
      IEntryField::defaultStyle() | IEntryField::autoTab | IEntryField::readOnly);
   iNameBoard = new IEntryField(
      partWindowId+WNDOFFSET_Blackboard_NameBoard, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(29,313),ISize(256, 21)), 
      IEntryField::defaultStyle() | IEntryField::readOnly);

   conn0 = new BlackboardConn0();
   conn3 = new BlackboardConn3();
   conn4 = new BlackboardConn4();
   conn5 = new BlackboardConn5();
   conn7 = new BlackboardConn7();
   conn17 = new BlackboardConn17();

   this->setFocus();
   this->setClient(iCanvas);
   iCanvas->setBackgroundColor(IColor(IColor::paleGray));
   iWriteBoard->setText("~Write");
   iClearButton->setText("~Clear");
   iExitButton->setText("E~xit");
   iOutputGroup->setText("Output");
   iInputGroup->setText("Input");
   iNameTxt->setAlignment(IStaticText::centerCenter);
   iNameTxt->setText("Name");
   iCompanyTxt->setAlignment(IStaticText::centerCenter);
   iCompanyTxt->setText("Company");
   iNameTxt1->setAlignment(IStaticText::centerCenter);
   iNameTxt1->setText("Name");
   iCompanyTxt3->setAlignment(IStaticText::centerCenter);
   iCompanyTxt3->setText("Company");
   iCompanyEntry->setLimit(100);
   iNameEntry->setLimit(100);
   iCompanyBoard->setLimit(100);
   iCompanyBoard->setBackgroundColor(IColor(IColor::paleGray));
   iNameBoard->setLimit(100);
   iNameBoard->setBackgroundColor(IColor(IColor::paleGray));
}     //end constructor


//------------------------------------------------------------------------------
// Blackboard :: ~Blackboard
//------------------------------------------------------------------------------
#pragma export (Blackboard::~Blackboard())
Blackboard::~Blackboard()
{
   conn0->stopHandlingNotificationsFor(*iExitButton);
   conn3->stopHandlingNotificationsFor(*iClearButton);
   conn4->stopHandlingNotificationsFor(*iClearButton);
   conn5->stopHandlingNotificationsFor(*iWriteBoard);
   conn7->stopHandlingNotificationsFor(*iWriteBoard);
   conn17->stopHandlingNotificationsFor(*this);

   delete conn0;
   delete conn3;
   delete conn4;
   delete conn5;
   delete conn7;
   delete conn17;


   delete iCanvas;
   delete iWriteBoard;
   delete iClearButton;
   delete iExitButton;
   delete iOutputGroup;
   delete iInputGroup;
   delete iNameTxt;
   delete iCompanyTxt;
   delete iNameTxt1;
   delete iCompanyTxt3;
   delete iCompanyEntry;
   delete iNameEntry;
   delete iCompanyBoard;
   delete iNameBoard;
}

//------------------------------------------------------------------------------
// Blackboard :: initializePart
//------------------------------------------------------------------------------
#pragma export (Blackboard::initializePart())
Blackboard & Blackboard::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// Blackboard :: makeConnections
//------------------------------------------------------------------------------
#pragma export (Blackboard::makeConnections())
Boolean Blackboard::makeConnections()
{
   this->enableNotification();
   iCanvas->enableNotification();
   iWriteBoard->enableNotification();
   iClearButton->enableNotification();
   iExitButton->enableNotification();
   iOutputGroup->enableNotification();
   iInputGroup->enableNotification();
   iNameTxt->enableNotification();
   iCompanyTxt->enableNotification();
   iNameTxt1->enableNotification();
   iCompanyTxt3->enableNotification();
   iCompanyEntry->enableNotification();
   iNameEntry->enableNotification();
   iCompanyBoard->enableNotification();
   iNameBoard->enableNotification();

   conn0->initialize(iExitButton, this);
   conn0->handleNotificationsFor(*iExitButton);
   conn3->initialize(iClearButton, iCompanyBoard);
   conn3->handleNotificationsFor(*iClearButton);
   conn4->initialize(iClearButton, iNameBoard);
   conn4->handleNotificationsFor(*iClearButton);
   conn5->initialize(iWriteBoard, iNameBoard);
   conn5->handleNotificationsFor(*iWriteBoard);
   conn5->setText(iNameEntry);
   conn7->initialize(iWriteBoard, iCompanyBoard);
   conn7->handleNotificationsFor(*iWriteBoard);
   conn7->setText(iCompanyEntry);
   conn17->initialize(this, iNameEntry);
   conn17->handleNotificationsFor(*this);

   return true;
}



