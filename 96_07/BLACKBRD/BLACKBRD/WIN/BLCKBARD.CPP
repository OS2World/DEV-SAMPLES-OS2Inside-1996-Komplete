/*******************************************************************************
* FILE NAME: Blckbard.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     Blackboard                                                               *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#include <iframe.hpp>
#include <icanvas.hpp>
#include <icolor.hpp>
#include <ipushbut.hpp>
#include <irect.hpp>
#include <ipoint.hpp>
#include <igroupbx.hpp>
#include <istattxt.hpp>
#include <ientryfd.hpp>
#include <inotifev.hpp>
#include <ivbconn.hpp>
#include "Blckbard.hpp"
#include <ivbmnstr.hpp>
#include <icoordsy.hpp>
#include <itrace.hpp>

//*****************************************************************************
// Class definition for BlackboardConn0
//*****************************************************************************
class BlackboardConn0 : public IVBConnection {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   BlackboardConn0(IPushButton * aSource, IFrameWindow * aTarget) : 
      source(aSource), target(aTarget) 
   {
      handleNotificationsFor(*source);
   };

   virtual  ~BlackboardConn0()
   {
      stopHandlingNotificationsFor(*source);
   };

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   virtual int checkEvent(const INotificationEvent & anEvent) const
   {
      return ((anEvent.notificationId() == IPushButton::buttonClickId));
   };
   void perform(const INotificationEvent & anEvent)
   {
      IFUNCTRACE_DEVELOP();
      ITRACE_DEVELOP(" firing connection : ExitButton(buttonClickEvent) to BlackBoardFrame(close))");
      target->close();
   };

protected:
private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //BlackboardConn0


//*****************************************************************************
// Class definition for BlackboardConn3
//*****************************************************************************
class BlackboardConn3 : public IVBConnection {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   BlackboardConn3(IPushButton * aSource, IEntryField * aTarget) : 
      source(aSource), target(aTarget) 
   {
      handleNotificationsFor(*source);
   };

   virtual  ~BlackboardConn3()
   {
      stopHandlingNotificationsFor(*source);
   };

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   virtual int checkEvent(const INotificationEvent & anEvent) const
   {
      return ((anEvent.notificationId() == IPushButton::buttonClickId));
   };
   void perform(const INotificationEvent & anEvent)
   {
      IFUNCTRACE_DEVELOP();
      ITRACE_DEVELOP(" firing connection : ClearButton(buttonClickEvent) to CompanyBoard(removeAll))");
      target->removeAll();
   };

protected:
private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;


};   //BlackboardConn3


//*****************************************************************************
// Class definition for BlackboardConn4
//*****************************************************************************
class BlackboardConn4 : public IVBConnection {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   BlackboardConn4(IPushButton * aSource, IEntryField * aTarget) : 
      source(aSource), target(aTarget) 
   {
      handleNotificationsFor(*source);
   };

   virtual  ~BlackboardConn4()
   {
      stopHandlingNotificationsFor(*source);
   };

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   virtual int checkEvent(const INotificationEvent & anEvent) const
   {
      return ((anEvent.notificationId() == IPushButton::buttonClickId));
   };
   void perform(const INotificationEvent & anEvent)
   {
      IFUNCTRACE_DEVELOP();
      ITRACE_DEVELOP(" firing connection : ClearButton(buttonClickEvent) to NameBoard(removeAll))");
      target->removeAll();
   };

protected:
private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;


};   //BlackboardConn4


//*****************************************************************************
// Class definition for BlackboardConn5
//*****************************************************************************
class BlackboardConn5 : public IVBConnection {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   BlackboardConn5(IPushButton * aSource, IEntryField * aTarget) : 
      source(aSource), target(aTarget) 
   {
      handleNotificationsFor(*source);
   };

   virtual  ~BlackboardConn5()
   {
      stopHandlingNotificationsFor(*source);
   };

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   virtual int checkEvent(const INotificationEvent & anEvent) const
   {
      return ((anEvent.notificationId() == IPushButton::buttonClickId));
   };
   void perform(const INotificationEvent & anEvent)
   {
      IFUNCTRACE_DEVELOP();
      ITRACE_DEVELOP(" firing connection : WriteBoard(buttonClickEvent) to NameBoard(text))");
      target->setText(iText->text());
   };
   BlackboardConn5 & setText(IEntryField * aSelf) {iText = aSelf; return *this;};

protected:
private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;
   IEntryField * iText;


};   //BlackboardConn5


//*****************************************************************************
// Class definition for BlackboardConn7
//*****************************************************************************
class BlackboardConn7 : public IVBConnection {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   BlackboardConn7(IPushButton * aSource, IEntryField * aTarget) : 
      source(aSource), target(aTarget) 
   {
      handleNotificationsFor(*source);
   };

   virtual  ~BlackboardConn7()
   {
      stopHandlingNotificationsFor(*source);
   };

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   virtual int checkEvent(const INotificationEvent & anEvent) const
   {
      return ((anEvent.notificationId() == IPushButton::buttonClickId));
   };
   void perform(const INotificationEvent & anEvent)
   {
      IFUNCTRACE_DEVELOP();
      ITRACE_DEVELOP(" firing connection : WriteBoard(buttonClickEvent) to CompanyBoard(text))");
      target->setText(iText->text());
   };
   BlackboardConn7 & setText(IEntryField * aSelf) {iText = aSelf; return *this;};

protected:
private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IEntryField * target;
   IEntryField * iText;


};   //BlackboardConn7


//*****************************************************************************
// Class definition for BlackboardConn17
//*****************************************************************************
class BlackboardConn17 : public IVBConnection {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   BlackboardConn17(IFrameWindow * aSource, IEntryField * aTarget) : 
      source(aSource), target(aTarget) 
   {
      handleNotificationsFor(*source);
   };

   virtual  ~BlackboardConn17()
   {
      stopHandlingNotificationsFor(*source);
   };

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   virtual int checkEvent(const INotificationEvent & anEvent) const
   {
      return ((anEvent.notificationId() == IFrameWindow::visibleId));
   };
   void perform(const INotificationEvent & anEvent)
   {
      IFUNCTRACE_DEVELOP();
      ITRACE_DEVELOP(" firing connection : BlackBoardFrame(visible) to NameEntry(setFocus))");
      target->setFocus();
   };

protected:
private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IEntryField * target;


};   //BlackboardConn17


const INotificationId _Export Blackboard::readyId = "Blackboard::readyId";

//------------------------------------------------------------------------------
// Blackboard :: defaultFramingSpec
//------------------------------------------------------------------------------
const IRectangle _Export Blackboard::defaultFramingSpec()
{
   return(IRectangle(VBPOINT(30, IWindow::desktopWindow()->size().height() - 12 - 432, 30, 12), ISize(320, 432)));
}

//------------------------------------------------------------------------------
// Blackboard :: defaultTitle
//------------------------------------------------------------------------------
IString _Export Blackboard::defaultTitle()
{
   return("My  Blackboard");
}

//------------------------------------------------------------------------------
// Blackboard :: Blackboard
//------------------------------------------------------------------------------
_Export Blackboard::Blackboard(
      unsigned long id, 
      IWindow * parent, 
      IWindow * owner, 
      const IRectangle & rect, 
      const IFrameWindow::Style & style, 
      const char * title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iBlackboardConnectionList = new IVBConnectionList;

   iCanvas = new ICanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iWriteBoard = new IPushButton(
      id+WNDOFFSET_Blackboard_WriteBoard, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(10, 16, 10, 359), ISize(80, 30)), 
      IPushButton::defaultStyle() | IPushButton::defaultButton);
   iClearButton = new IPushButton(
      id+WNDOFFSET_Blackboard_ClearButton, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(115, 16, 115, 359), ISize(80, 30)));
   iExitButton = new IPushButton(
      id+WNDOFFSET_Blackboard_ExitButton, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(222, 16, 222, 359), ISize(80, 30)));
   iOutputGroup = new IGroupBox(
      id+WNDOFFSET_Blackboard_OutputGroup, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(14, 241, 14, 27), ISize(282, 137)));
   iInputGroup = new IGroupBox(
      id+WNDOFFSET_Blackboard_InputGroup, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(14, 85, 14, 182), ISize(282, 138)));
   iNameTxt = new IStaticText(
      id+WNDOFFSET_Blackboard_NameTxt, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(29, 184, 29, 200), ISize(256, 21)));
   iCompanyTxt = new IStaticText(
      id+WNDOFFSET_Blackboard_CompanyTxt, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(29, 131, 29, 253), ISize(256, 21)));
   iNameTxt1 = new IStaticText(
      id+WNDOFFSET_Blackboard_NameTxt1, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(29, 337, 29, 47), ISize(256, 21)));
   iCompanyTxt3 = new IStaticText(
      id+WNDOFFSET_Blackboard_CompanyTxt3, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(29, 284, 29, 100), ISize(256, 21)));
   iCompanyEntry = new IEntryField(
      id+WNDOFFSET_Blackboard_CompanyEntry, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(29, 97, 29, 282), ISize(256, 26)), 
      IEntryField::defaultStyle() | IControl::group | IControl::tabStop);
   iNameEntry = new IEntryField(
      id+WNDOFFSET_Blackboard_NameEntry, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(29, 156, 29, 223), ISize(256, 26)), 
      IEntryField::defaultStyle() | IControl::tabStop);
   iCompanyBoard = new IEntryField(
      id+WNDOFFSET_Blackboard_CompanyBoard, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(29, 251, 29, 128), ISize(256, 26)), 
      IEntryField::defaultStyle() | IEntryField::autoTab | IEntryField::readOnly);
   iNameBoard = new IEntryField(
      id+WNDOFFSET_Blackboard_NameBoard, 
      iCanvas, 
      iCanvas, 
      IRectangle(VBPOINT(29, 309, 29, 70), ISize(256, 26)), 
      IEntryField::defaultStyle() | IEntryField::readOnly);

   iCanvas->setBackgroundColor(IColor(IColor::paleGray));
   iCanvas->setHelpId(1);
   iWriteBoard->setText(VBXLATEMNEMONIC("~Write"));
   iClearButton->setText(VBXLATEMNEMONIC("~Clear"));
   iExitButton->setText(VBXLATEMNEMONIC("E~xit"));
   iOutputGroup->setText("Output");
   iInputGroup->setText("Input");
   iNameTxt->setAlignment(IStaticText::centerCenter);
   iNameTxt->setText("Name");
   iCompanyTxt->setAlignment(IStaticText::centerCenter);
   iCompanyTxt->setText("Company");
   iNameTxt1->setAlignment(IStaticText::centerCenter);
   iNameTxt1->setText("Name");
   iCompanyTxt3->setAlignment(IStaticText::centerCenter);
   iCompanyTxt3->setText("Company");
   iCompanyEntry->setLimit(100);
   iNameEntry->setLimit(100);
   iNameEntry->enableInsertMode(true);
   iCompanyBoard->setLimit(100);
   iCompanyBoard->setBackgroundColor(IColor(IColor::paleGray));
   iNameBoard->setLimit(100);
   iNameBoard->setBackgroundColor(IColor(IColor::paleGray));
   this->setClient(iCanvas);
   this->setFocus();
}     //end constructor

//------------------------------------------------------------------------------
// Blackboard :: ~Blackboard
//------------------------------------------------------------------------------
_Export Blackboard::~Blackboard()
{
   delete iBlackboardConnectionList;

   delete iNameBoard;
   delete iCompanyBoard;
   delete iNameEntry;
   delete iCompanyEntry;
   delete iCompanyTxt3;
   delete iNameTxt1;
   delete iCompanyTxt;
   delete iNameTxt;
   delete iInputGroup;
   delete iOutputGroup;
   delete iExitButton;
   delete iClearButton;
   delete iWriteBoard;
   delete iCanvas;
}

//------------------------------------------------------------------------------
// Blackboard :: initializePart
//------------------------------------------------------------------------------
Blackboard & _Export Blackboard::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}

//------------------------------------------------------------------------------
// Blackboard :: makeConnections
//------------------------------------------------------------------------------
void _Export Blackboard::makeConnections()
{
   this->enableNotification();
   iCanvas->enableNotification();
   iWriteBoard->enableNotification();
   iClearButton->enableNotification();
   iExitButton->enableNotification();
   iOutputGroup->enableNotification();
   iInputGroup->enableNotification();
   iNameTxt->enableNotification();
   iCompanyTxt->enableNotification();
   iNameTxt1->enableNotification();
   iCompanyTxt3->enableNotification();
   iCompanyEntry->enableNotification();
   iNameEntry->enableNotification();
   iCompanyBoard->enableNotification();
   iNameBoard->enableNotification();

   unsigned long id = this->id();
   BlackboardConn0 *conn0 = new BlackboardConn0(iExitButton, this);
   iBlackboardConnectionList->add(conn0);
   BlackboardConn3 *conn3 = new BlackboardConn3(iClearButton, iCompanyBoard);
   iBlackboardConnectionList->add(conn3);
   BlackboardConn4 *conn4 = new BlackboardConn4(iClearButton, iNameBoard);
   iBlackboardConnectionList->add(conn4);
   BlackboardConn5 *conn5 = new BlackboardConn5(iWriteBoard, iNameBoard);
   iBlackboardConnectionList->add(conn5);
   BlackboardConn7 *conn7 = new BlackboardConn7(iWriteBoard, iCompanyBoard);
   iBlackboardConnectionList->add(conn7);
   BlackboardConn17 *conn17 = new BlackboardConn17(this, iNameEntry);
   iBlackboardConnectionList->add(conn17);

   conn5->setText(iNameEntry);
   conn7->setText(iCompanyEntry);

   iBlackboardConnectionList->initialize();
}


